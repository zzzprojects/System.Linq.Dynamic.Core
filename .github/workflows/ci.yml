name: Build with Tests

on: 
 push:
 workflow_dispatch:
 pull_request:
   types: [opened, edited]

jobs:
  build_and_test_Windows:
    name: "Windows: Build and Tests"
    runs-on: windows-latest

    env:
      IsRunningOnGitHubActions: 'true'
      UseInMemory: 'true'

    steps:  
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
              
    - name: Build
      run: |
        dotnet build ./src/System.Linq.Dynamic.Core/System.Linq.Dynamic.Core.csproj -c Release -p:buildType=azure-pipelines-ci

    - name: Run Tests EFCore net8.0
      run: |
        dotnet test ./test/System.Linq.Dynamic.Core.Tests/System.Linq.Dynamic.Core.Tests.csproj -c Release -p:buildType=azure-pipelines-ci

  build_and_test_Linux:
    name: "Linux: Build and Tests"
    runs-on: ubuntu-latest

    env:
      IsRunningOnGitHubActions: 'true'
      BranchName: ${{ github.head_ref || github.ref_name }}

    steps:  
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '17'

    - name: Install dotnet tools
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-coverage

    - name: Check if analysis on SonarCloud is possible
      id: secret-check
      # perform secret check & put boolean result as an output
      shell: bash
      run: |
        if [ "${{ secrets.SONAR_TOKEN }}" != '' ]; then
          echo "run_analysis=true" >> $GITHUB_OUTPUT;
        else
          echo "run_analysis=false" >> $GITHUB_OUTPUT;
        fi

    - name: Begin analysis on SonarCloud
      if: ${{ steps.secret-check.outputs.run_analysis == 'true' }}
      run: |
        dotnet sonarscanner begin /k:"zzzprojects_System.Linq.Dynamic.Core" /o:"zzzprojects" /d:sonar.branch.name=$BranchName /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token=${{ secrets.SONAR_TOKEN }} /d:sonar.pullrequest.provider=github /d:sonar.dotnet.excludeTestProjects=true /d:sonar.cs.vscoveragexml.reportsPaths=**/dynamic-coverage-*.xml /d:sonar.verbose=true
              
    - name: Build
      run: |
        dotnet build ./src/System.Linq.Dynamic.Core/System.Linq.Dynamic.Core.csproj -c Debug -p:buildType=azure-pipelines-ci

    - name: Run Tests EF net8.0 (with Coverage)
      run: |
        dotnet-coverage collect 'dotnet test ./test/EntityFramework.DynamicLinq.Tests/EntityFramework.DynamicLinq.Tests.csproj --configuration Debug --framework net8.0 -p:buildType=azure-pipelines-ci' -f xml -o dynamic-coverage-ef.xml
        
    - name: Run Tests EFCore net8.0 (with Coverage)
      run: |
        dotnet-coverage collect 'dotnet test ./test/System.Linq.Dynamic.Core.Tests/System.Linq.Dynamic.Core.Tests.csproj --configuration Debug -p:buildType=azure-pipelines-ci' -f xml -o dynamic-coverage-efcore.xml
        
    - name: End analysis on SonarCloud
      if: ${{ steps.secret-check.outputs.run_analysis == 'true' }}
      run: |
        dotnet sonarscanner end /d:sonar.token=${{ secrets.SONAR_TOKEN }}

    # - name: Run Tests EFCore net7.0
    #   run: |
    #     dotnet test ./test/System.Linq.Dynamic.Core.Tests.Net7/System.Linq.Dynamic.Core.Tests.Net7.csproj -c Release -p:buildType=azure-pipelines-ci
    #   continue-on-error: true

    # - name: Run Tests EFCore net6.0
    #   run: |
    #     dotnet test ./test/System.Linq.Dynamic.Core.Tests.Net6/System.Linq.Dynamic.Core.Tests.Net6.csproj -c Release -p:buildType=azure-pipelines-ci
    #   continue-on-error: true