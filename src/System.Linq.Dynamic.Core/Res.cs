namespace System.Linq.Dynamic.Core
{
    internal static class Res
    {
        public const string AmbiguousConstructorInvocation = "Ambiguous invocation of '{0}' constructor";
        public const string AmbiguousIndexerInvocation = "Ambiguous invocation of indexer in type '{0}'";
        public const string AmbiguousMethodInvocation = "Ambiguous invocation of method '{0}' in type '{1}'";
        public const string ArgsIncompatibleWithLambda = "Argument list incompatible with lambda expression";
        public const string BinraryCharExpected = "Binary character expected";
        public const string BothTypesConvertToOther = "Both of the types '{0}' and '{1}' convert to the other";
        public const string CannotConvertValue = "A value of type '{0}' cannot be converted to type '{1}'";
        public const string CannotIndexMultiDimArray = "Indexing of multi-dimensional arrays is not supported";
        public const string CloseBracketExpected = "']' expected";
        public const string CloseBracketOrCommaExpected = "']' or ',' expected";
        public const string CloseParenOrCommaExpected = "')' or ',' expected";
        public const string CloseParenOrOperatorExpected = "')' or operator expected";
        public const string ColonExpected = "':' expected";
        public const string DigitExpected = "Digit expected";
        public const string DotExpected = "'.' expected";
        public const string DotOrOpenParenExpected = "'.' or '(' expected";
        public const string DotOrOpenParenOrStringLiteralExpected = "'.' or '(' or string literal expected";
        public const string DynamicExpandoObjectIsNotSupported = "Dynamic / ExpandoObject is not supported in .NET 3.5, UAP and .NETStandard 1.3";
        public const string DuplicateIdentifier = "The identifier '{0}' was defined more than once";
        public const string EnumTypeNotFound = "Enum type '{0}' not found";
        public const string EnumValueExpected = "Enum value expected";
        public const string EnumValueNotDefined = "Enum value '{0}' is not defined in enum type '{1}'";
        public const string ExpressionExpected = "Expression expected";
        public const string ExpressionTypeMismatch = "Expression of type '{0}' expected";
        public const string FirstExprMustBeBool = "The first expression must be of type 'Boolean'";
        public const string FunctionRequiresOneArg = "The '{0}' function requires one argument";
        public const string FunctionRequiresOneNotNullArg = "The '{0}' function requires one argument which is not null.";
        public const string FunctionRequiresNotNullArgOfType = "The '{0}' function requires the {1}argument to be not null and of type {2}.";
        public const string FunctionRequiresOneOrTwoArgs = "The '{0}' function requires 1 or 2 arguments";
        public const string HexCharExpected = "Hexadecimal character expected";
        public const string IQueryableProviderNotAsync = "The provider for the source IQueryable doesn't implement IAsyncQueryProvider/IDbAsyncQueryProvider. Only providers that implement IAsyncQueryProvider/IDbAsyncQueryProvider can be used for Entity Framework asynchronous operations.";
        public const string IdentifierExpected = "Identifier expected";
        public const string IdentifierImplementingInterfaceExpected = "Identifier implementing interface '{0}' expected";
        public const string IifRequiresThreeArgs = "The 'iif' function requires three arguments";
        public const string IncompatibleOperand = "Operator '{0}' incompatible with operand type '{1}'";
        public const string IncompatibleOperands = "Operator '{0}' incompatible with operand types '{1}' and '{2}'";
        public const string IncompatibleTypes = "Types '{0}' and '{1}' are incompatible";
        public const string InvalidBinaryIntegerLiteral = "Invalid binary integer literal '{0}'";
        public const string InvalidCharacter = "Syntax error '{0}'";
        public const string InvalidCharacterLiteral = "Character literal must contain exactly one character";
        public const string InvalidIndex = "Array index must be an integer expression";
        public const string InvalidIntegerLiteral = "Invalid integer literal '{0}'";
        public const string InvalidIntegerQualifier = "Invalid integer literal qualifier '{0}'";
        public const string InvalidRealLiteral = "Invalid real literal '{0}'";
        public const string InvalidStringQuoteCharacter = "An escaped string should start with a double (\") or a single (') quote.";
        public const string InvalidStringLength = "String '{0}' should have at least {1} characters.";
        public const string IsNullRequiresTwoArgs = "The 'isnull' function requires two arguments";
        public const string MethodIsVoid = "Method '{0}' in type '{1}' does not return a value";
        public const string MethodsAreInaccessible = "Methods on type '{0}' are not accessible";
        public const string MinusCannotBeAppliedToUnsignedInteger = "'-' cannot be applied to unsigned integers.";
        public const string MissingAsClause = "Expression is missing an 'as' clause";
        public const string NeitherTypeConvertsToOther = "Neither of the types '{0}' and '{1}' converts to the other";
        public const string NoApplicableAggregate = "No applicable aggregate method '{0}({1})' exists";
        public const string NoApplicableIndexer = "No applicable indexer exists in type '{0}'";
        public const string NoApplicableMethod = "No applicable method '{0}' exists in type '{1}'";
        public const string NoItInScope = "No 'it' is in scope";
        public const string NoMatchingConstructor = "No matching constructor in type '{0}'";
        public const string NoParentInScope = "No 'parent' is in scope";
        public const string NoRootInScope = "No 'root' is in scope";
        public const string NullPropagationRequiresCorrectArgs = "The 'np' (null-propagation) function requires 1 or 2 arguments";
        public const string NullPropagationRequiresValidExpression = "The 'np' (null-propagation) function requires the first argument to be a MemberExpression, ParameterExpression or MethodCallExpression";
        public const string OpenBracketExpected = "'[' expected";
        public const string OpenCurlyParenExpected = "'{' expected";
        public const string OpenParenExpected = "'(' expected";
        public const string OpenParenOrIdentifierExpected = "'(' or Identifier expected";
        public const string ParseExceptionFormat = "{0} (at index {1})";
        public const string SyntaxError = "Syntax error";
        public const string TokenExpected = "{0} expected";
        public const string TypeHasNoNullableForm = "Type '{0}' has no nullable form";
        public const string TypeNotFound = "Type '{0}' not found";
        public const string UnexpectedUnclosedString = "Unexpected end of string with unclosed string at position {0} near '{1}'.";
        public const string UnexpectedUnrecognizedEscapeSequence = "Unexpected unrecognized escape sequence at position {0} near '{1}'.";
        public const string UnknownIdentifier = "Unknown identifier '{0}'";
        public const string UnknownPropertyOrField = "No property or field '{0}' exists in type '{1}'";
        public const string UnterminatedStringLiteral = "Unterminated string literal";
    }
}
